# Generated by Django 3.0.11 on 2025-06-19 06:39

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('餌担当', '餌担当'), ('治療担当', '治療担当'), ('事務', '事務'), ('管理者', '管理者')], max_length=10)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('password_hash', models.CharField(max_length=50)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Cow',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('cow_number', models.CharField(max_length=10, unique=True)),
                ('last5_digits', models.CharField(db_index=True, max_length=5)),
                ('shed_code', models.CharField(max_length=4)),
                ('intake_date', models.DateField()),
                ('origin_region', models.CharField(choices=[('北海道', '北海道'), ('曽於', '曽於'), ('関', '関'), ('飛騨', '飛騨'), ('自家', '自家')], default='自家', max_length=10)),
                ('status', models.CharField(choices=[('active', 'active'), ('moved', 'moved'), ('sold', 'sold'), ('dead', 'dead')], default='active', max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='Medicine',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('default_days', models.IntegerField(blank=True, null=True)),
                ('notes', models.CharField(blank=True, max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Treatment',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('treatment_date', models.DateTimeField()),
                ('diagnosis', models.CharField(blank=True, max_length=50, null=True)),
                ('body_temperature', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True)),
                ('follow_up_days', models.IntegerField(blank=True, null=True)),
                ('note', models.CharField(blank=True, max_length=255, null=True)),
                ('cow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cattle.Cow')),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TreatmentMedicine',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('dosage_days', models.IntegerField()),
                ('medicine', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cattle.Medicine')),
                ('treatment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cattle.Treatment')),
            ],
        ),
        migrations.CreateModel(
            name='MovementLog',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('from_shed_code', models.CharField(blank=True, max_length=4, null=True)),
                ('to_shed_code', models.CharField(max_length=4)),
                ('moved_at', models.DateField()),
                ('cow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cattle.Cow')),
                ('moved_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FollowUpObservation',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('observed_at', models.DateTimeField()),
                ('appetite', models.CharField(blank=True, choices=[('○', '○'), ('△', '△'), ('×', '×'), ('-', '-')], max_length=1, null=True)),
                ('observer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('treatment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cattle.Treatment')),
            ],
        ),
        migrations.CreateModel(
            name='FeedingObservation',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('observed_at', models.DateTimeField()),
                ('appetite', models.CharField(blank=True, choices=[('○', '○'), ('△', '△'), ('×', '×'), ('-', '-')], max_length=1, null=True)),
                ('symptoms', models.CharField(blank=True, max_length=255, null=True)),
                ('memo', models.CharField(blank=True, max_length=255, null=True)),
                ('cow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cattle.Cow')),
                ('observer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
